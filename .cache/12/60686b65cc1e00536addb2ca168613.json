{"id":"shader/vertex.glsl","dependencies":[{"name":"C:\\Users\\david\\OneDrive\\Lsports\\Frontend\\cornea\\package.json","includedInParent":true,"mtime":1585088145006}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nvarying float alpha;\\nvoid main() \\n{ \\n    //calculate the vertex position as expected in a perpective renderer\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  \\n    //now onto the alpha calculation\\n    //get the vertex vertex normal \\n    vec3 nmal = normal;\\n  \\n    // find vector from the vertex to camera and then normalise it\\n    vec3 viewVector =  normalize((cameraPosition - normal));\\n  \\n    // now find the dot poduct\\n    // faceing the camera is 1 and perpendicular is 0 so for this effect you want to minus it from 1\\n    // note that alpha is the varying float passed between the vertex and fragment shader\\n    alpha =  1.0 - dot(nmal, viewVector);\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shader/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shader/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shader/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shader/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shader/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":737},"source":"shader/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"shader/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nvarying float alpha;\\nvoid main() \\n{ \\n    //calculate the vertex position as expected in a perpective renderer\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  \\n    //now onto the alpha calculation\\n    //get the vertex vertex normal \\n    vec3 nmal = normal;\\n  \\n    // find vector from the vertex to camera and then normalise it\\n    vec3 viewVector =  normalize((cameraPosition - normal));\\n  \\n    // now find the dot poduct\\n    // faceing the camera is 1 and perpendicular is 0 so for this effect you want to minus it from 1\\n    // note that alpha is the varying float passed between the vertex and fragment shader\\n    alpha =  1.0 - dot(nmal, viewVector);\";"},"lineCount":null}},"error":null,"hash":"dce9d0f080f991907904c5278d3bcad0","cacheData":{"env":{}}}